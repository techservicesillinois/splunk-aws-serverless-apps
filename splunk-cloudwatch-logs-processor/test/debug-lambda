#!  /usr/bin/env python3

import argparse
import importlib 
import json
import logging
import os
import sys

logging.getLogger('botocore').setLevel(logging.ERROR)

#let callCount = 0;
#
#function callback(error, count) {
#   console.log("***** END REQUEST", callCount, "*****");
#   if (! error)
#       return;
#
#   console.log(error);
#}

#process.stdin.on('readable', () => {
#  const chunk = process.stdin.read();
#
#  if (chunk !== null) {
#   callCount++;
#   console.log("===== BEGIN REQUEST", callCount, " =====");
#   const parsed = JSON.parse(chunk.toString('ascii'));
#   // console.log(JSON.stringify(parsed, null, 2));
#   handler(parsed.event, parsed.context, callback);
#  }
#});

#####

def get_handler(handler_path):
    path, handler_name = handler_path.rsplit('.', 1)

    logging.info('{:<12} = {}'.format('path', path))
    logging.info('{:<12} = {}'.format('handler_name', handler_name))

    #   Make into absolute path.
    path = os.path.abspath(path)

    #   Split out directory path from module name.
    path, module_name = os.path.split(path)

    logging.info('{:<12} = {}'.format('path', path))
    logging.info('{:<12} = {}'.format('module_name', module_name))
    logging.info('{:<12} = {}'.format('module_name', module_name))

    #   Add directory to Python path.
    if not path in sys.path:
        sys.path.insert(0, path)

    #   Import specified module, and extract handler function.
    module = importlib.import_module(module_name)
    handler = module.__getattribute__(handler_name)

    logging.info('found handler \'{}.{}\' from {}' \
          .format(module_name, handler_name, os.path.relpath(path)))
    return handler

#####

def main(argv):
    #   Don't buffer standard output.
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', -1)

    #   Create top-level parser.
    parser = argparse.ArgumentParser()

    parser.add_argument \
        ('--handler', dest='handler', action='store', required=True,
         help='Filesystem path and name of handler (/full/path/foo.handler')

#   parser.add_argument \
#       ('--verbose', dest='verbose', action='count', default=0,
#        help='verbosity level')

    #   Parse arguments.
    arg = parser.parse_args()

    print(arg)
    logging.getLogger().setLevel(logging.INFO)
    handler = get_handler(arg.handler)

    count = 0

    with open('data/debug-roma.json') as stream:
        #   TODO: Need a while loop here.
        data = stream.read()

        if not data:
            return

        count += 1

        print(f'===== BEGIN REQUEST ({count}) =====')

        parsed = json.loads(data)
        print(parsed)

        #   Call handler.
        logging.info(f'calling handler \'{handler.__name__}\'')

        try:
            handler(parsed['event'], parsed['context'])
    #   except OSError as err:
    #       print("OS error: {0}".format(err))
    #   except ValueError:
    #       print("Could not convert data to an integer.")
        except exc:
            print(f'===== END REQUEST ({count}) =====')
            print(exc)
            return 1

        print(f'===== END REQUEST ({count}) =====')
        return 0

    # end with.

    return 0

#####

if __name__ == '__main__':
    sys.exit(main(sys.argv))
