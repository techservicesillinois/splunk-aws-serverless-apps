#   /usr/bin/env python3

import argparse
import os
import random
import string
import sys
import uuid

from attrdict import AttrDict
from datetime import datetime, timedelta, timezone

from jinja2 import Environment, Template

FMT_STRFTIME    = '%d/%b/%Y:%H:%M:%S %z'

FMT_LOG_MSG     = '{ip} - - [{tstamp}] "{method} /{url}/ HTTP/1.1" 200 {size}'

LOG_GROUP       = '/service/splunk-test'

TEMPLATE_NAME   = 'cloudwatch.j2'

#####

class RandomValues:

    #####

    @classmethod
    def _alpha_string(cls, length):
        str = ''

        for i in range(length):
            str += random.choice(string.ascii_lowercase)

        return str

    #####

    @classmethod
    def _datetime(cls, dt):
        return dt - timedelta \
            (minutes=random.randrange(0, 12), seconds=random.randrange(0, 60))

    #####

    @classmethod
    def _digits(cls, length):
        digits = ''

        for i in range(length):
            digits += random.choice(string.digits)

        return digits

    #####

    @classmethod
    def _ip_address(cls):
        return '.'.join(map(str, (random.randint(1, 254) for _ in range(4))))

    #####

    _method_list = [ 'GET', 'HEAD', 'POST', 'PUT' ]

    @classmethod
    def _method(cls):
        return random.choice(cls._method_list)

    #####

    @classmethod
    def _timestamp(cls, dt):
        return dt.strftime(FMT_STRFTIME)

    #####

    @classmethod
    def _url(cls):
        return '/'.join((cls._alpha_string(3), cls._alpha_string(8)))

#####

class RandomEvents:

    #####

    @classmethod
    def __init__(cls, dt, low, high):
        cls.datetime = dt
        cls.range = range(random.randrange(low, high))

        cls.jinja_dict = \
            {
            'log_group'     : LOG_GROUP,
            'log_events'    : [],
            'log_stream'    : 'test/' + str(uuid.uuid1()),
            'owner'         : RandomValues._digits(16),
            }

    #####

    @classmethod
    def to_jinja_dict(cls):
        dt_list = []

        dt_list.extend \
            ([RandomValues._datetime(cls.datetime) for r in cls.range ])

        #   Sort in place.
        dt_list.sort()

        for i in cls.range:
            event = generate_random_log_event(dt_list[i])
            cls.jinja_dict['log_events'].append(event)

        return cls.jinja_dict

#####

class RandomLogMessage:

    #####

    def __init__(self, dt):
        self.attrs = \
            {
            'ip'        : RandomValues._ip_address(),
            'method'    : RandomValues._method(),
            'size'      : random.randrange(40, 1000),
            'tstamp'    : RandomValues._timestamp(dt),
            'url'       : RandomValues._url(),
            }

        return

    #####

    def __str__(self):
        return FMT_LOG_MSG.format(**self.attrs)

#####

def generate_random_log_event(dt):
    return \
        {
        'id'        : uuid.uuid1(),
        'timestamp' : int(1000 * dt.timestamp()),
        'message'   : str(RandomLogMessage(dt)),
        }

#####

def main(argv):
    #   Don't buffer standard output.
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', -1)

    parser = argparse.ArgumentParser()

    parser.add_argument \
        ('--verbose', dest='verbose', action='count', default=0,
         help='verbosity level')

    #   Parse command-line arguments.
    arg = parser.parse_args()

    now  = datetime.now().astimezone()

    jinja_env = Environment()

    with open(TEMPLATE_NAME, 'r') as stream:
        template = Template(stream.read())

    jinja_dict = RandomEvents(now, 1, 6).to_jinja_dict()

    print(template.render(jinja_dict))
    return 0

#####

if __name__ == '__main__':
    sys.exit(main(sys.argv))
